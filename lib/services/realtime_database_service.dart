import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_database/firebase_database.dart';
import '../models/health_data.dart';

class RealtimeDatabaseService {
  // üëâ ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á Realtime Database ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Console ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡πÄ‡∏õ‡πä‡∏∞
  static const _dbUrl =
      'https://elderwatchtest-default-rtdb.asia-southeast1.firebasedatabase.app';

  late final FirebaseDatabase _db;
  late final DatabaseReference _log;

  RealtimeDatabaseService() {
    _db = FirebaseDatabase.instanceFor(
      app: Firebase.app(),
      databaseURL: _dbUrl,
    );
    _db.setPersistenceEnabled(true);
    _db.setPersistenceCacheSizeBytes(10 * 1024 * 1024);
    _log = _db.ref('log')..keepSynced(true);
  }

  DatabaseReference get log => _log;

  HealthData _fromNode(Map<String, dynamic> node, {String? iso}) {
    if (node['processed'] is Map) {
      return HealthData.fromProcessed(
        Map<String, dynamic>.from(node['processed']),
        timestampIso: iso,
      );
    }
    // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ processed (‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏±‡∏ö‡∏ß‡∏¥‡∏ò‡∏µ 1 ‡πÅ‡∏ï‡πà‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ)
    int ts = 0;
    if (iso != null) {
      try {
        ts = DateTime.parse(iso).millisecondsSinceEpoch ~/ 1000;
      } catch (_) {}
    }
    return HealthData(heartRate: 0, spo2: 0, fell: false, timestamp: ts);
  }

  /// one-shot: ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á)
  Future<HealthData?> getLatestOnce() async {
    final snap = await _log.orderByKey().limitToLast(1).get();
    final v = snap.value;
    if (v is! Map || v.isEmpty) return null;
    final entry = Map<String, dynamic>.from(v);
    final iso = entry.keys.first.toString();
    final node = Map<String, dynamic>.from(entry.values.first);
    return _fromNode(node, iso: iso);
  }

  /// stream: ‡∏î‡∏∂‡∏á‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á)
  Stream<HealthData?> latestAny() {
    final q = _log.orderByKey().limitToLast(1);
    return q.onValue.map((e) {
      final v = e.snapshot.value;
      if (v is! Map || v.isEmpty) return null;
      final entry = Map<String, dynamic>.from(v);
      final iso = entry.keys.first.toString();
      final node = Map<String, dynamic>.from(entry.values.first);
      return _fromNode(node, iso: iso);
    });
  }

  // ‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
  Stream<HealthData?> latestHealthFromLogFast() => latestAny();
  Future<void> debugPrintLatest() async {
    final snap = await _log.orderByKey().limitToLast(1).get();
    // ignore: avoid_print
    print('[DEBUG] db=$_dbUrl last1=${snap.value}');
  }

  Future<void> linkCheckQuick() async => debugPrintLatest();
  Future<void> sanityCheck() async => debugPrintLatest();
}
